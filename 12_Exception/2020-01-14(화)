2020.01.14 화요일 수업

 - 예외처리(Exception)
 	프로그램 수행 시 치명적 상황이 발생하여 비정상 종료 상황이 발생한 것
 		 - 1. 컴파일 에러 : 프로그램 실행을 막는 소스 상의 문법 에러, 소스 구문을 수정하여 해결
 		 - 2. 런파임 에러 : 입력 값이 틀렸거나, 배열의 인덱스 범위를 벗어났거나, 계산식의 오류 등 주로 if문 사용으로 에러 처리
 		 - 3. 시스템 에러 : 컴퓨터 오작동으로 인한 에러, 소스 구문으로 해결 불가
 		 
 		 - 오류 해결 방법
 		 	소스 수정으로 해결 가능한 에러를 예외(Exception)라고 하는데 이러한 예외 상황(예측 가능한 에러) 
 		 	구문을 처리하는 방법인 예외처리를 통해 해결
 		 	
 - 예외 클래스 계층 구조
 	모든 클래스의 최고 조상 Object
 	모든 예외의 최고 조상  Exception
 		
 		 - unchecked Exception경우
 		 	프로그래머의 부주의로 인한 오류
 		 	개발자가 처리하지 않아도 되는 Exception
 		 	RuntimeException이 무조건 상위에 있다.
 		 		ArithmeticException : 0으로 나누는 경우 발생
 		 							  if문으로 나누는 수가 0인지 검사
 		 							  
 		 		ArrayIndexOutOfBoundsException : 배열의 index범위를 넘어서 참조하는 경우
 		 									   : 배열명.length를 사용하여 배열의 범위 확인
 		 									   
 		 		NegativeArraySizeException : 배열 크기를 음수로 지정한 경우 발생
 		 								   : 배열 크기를 0보다 크게 지정해야 함
 		 								   
 		 		ClassCastException : Cast연산자 사용 시 타입 오류
 		 						   : instanceof연산자로 객체타입 확인 후 cast연산
 		 						   
 		 		NullPointerException : Null인 참조 변수로 객체 멤버 참조 시도 시 발생
 		 							 : 객체 사용 전에 참조 변수가 null인지 확인
 		 
 		 - checked Exception
 		 	
 		 	
 - 예외처리 방법
 	1. Exception 처리를 호출한 메소드에게 위임
 		메소드 선언시 throws ExceptionName문을 추가하여 호출한 상위 메소드에게 처리 위임 
 		계속 위임하면 main()메소드까지 위임하게 되고 거기서도 처리되지 않은 경우 비정상 종료
 		
 	2. Exception이 발생한 곳에서 직접 처리
 		try~catch문을 이용하여 예외처리
 			 - try : exception 발생할 가능성이 있는 코드를 안에 기술
 			 - catch : try 구문에서 exception 발생 시 해당하는 exception에 대한 처리 기술
 			 		 : 여러개의 exception처리가 가능하나 exception간의 상속 관계 고려
 			 - finally : exception 발생 여부와 관계없이 꼭 처리해야 하는 로직 기술 (무조건 실행)
 			 		   : 중간에 return문을 만나도 finally구문은 실행되지만 system.exit();를 만나면 무조건 프로그램 종료
 			 		   : 주로 java.io나 java.sql 패키지의 메소드 처리 시 이용
 	
 	throw - Exception 강제발생
 	throws - 호출한 곳으로 위임
 	
 - Exception과 오버라이딩
 	오버라이딩 시 throws하는 Exception의 개수와 상관없이 처리 범위가 좁아야함
 		==> 상속관계에서 오버라이딩 적용시 다형성도 적용되므로 부모는 자식을 받을 수 있지만 자식은 부모를 받을 수 없기 때문에