2020.01.17 금요일 수업

 - 컬렉션
 	메모리상에서 자료를 구조적으로 처리하는 법을 자료구조라 일컫는다.
 	자바에서 제공하는 자료구조를 담당하는 프레임워크(틀에서 움직이는 것)
 	자료구조에 대해서 몰라도 상관없다.
 	"java.util" 패키지에 포함되며, 인터페이스를 통해 정형화된 방법으로 다양한 컬렉션 클래스 이용 가능
 	
 	컬렉션 >> 배열의 문제점을 보완한 친구
 			1. 한 번 크기를 지정하면 변경할 수 없다.
 			2. 기록된 데이터에 대한 중간 위치의 추가, 삭제가 불편하다.
 			3. 한 타입의 데이터만 저장 가능하다.
 			
 	컬렉션의 장점
 			1. 저장하는 크기의 제약이 없다
 			2. 추가, 삭제 정렬 등의 기능 처리가 간단하게 해결된다.
 			3. 여러 타임의 데이터가 저장 가능하다. (잘 사용하지 않음) (제네릭)
 					- 객체만 저장할 수 있기 때문에 필요에 따라 기본 자료형을 저장해야 하는 경우 Wrapper클래스 사용
 	
 	컬렉션 종류
 	
 	
 				Collection 인터페이스를 List와 Set만 상속 받고 있다.
 				그래서 List,set 과 Map은 메소드 명이 다르고 
 				
 					Collection
 					
 		List			Set				Map
 		
 	List, Set 메소드 이름 비슷 => 컬렉션인터페이스를 상속받기 때문에.
 	
 ===========================================
 =	Collection - List - 순서를 유지하고 저장	   =
 =						중복 저장 가능		   =
 =										   =
 =	Collection - set  - 순서를 유지하지 않고 저장  =
 =						중복 저장 안됨		   =
 =										   =
 =	     		 Map  - 키와 값의 쌍으로 저장	   =
 =						키는 중복 저장 안됨	   =
 =						순서 유지 안됨		   =
 ===========================================	
 
 - List (배열이 들어있다) 
 	자료들을 순차적으로 나열한 자료구조로 "인덱스"로 관리되며, 중복해서 객체 저장 가능 (인덱스 번호때문에 가능함)
 		 - ArrayList 
 		 	List의 후손으로 초기 저장용량은 10으로 자동 설정  
 		 	따로 지정 가능 저장 용량을 초과한 객체들이 들어오면 자동으로 증가
 		 	고정도 가능 동기화(Synchronized)를 제공하지 않음.
 		 	
 - Vertor
 	List의 후손으로 ArrayList와 동등하지만 동기화를 제공한다는 점이 ArrayList와의 차이점
 	    ==> List 중에서 가장 성능이 좋지 않음
 	    
 - LinkedList
 	배열이 아니라서 각 객체의 가리키는 주소를 바꿔주면 되므로 객체 삭제와 삽입이 빈번하게 일어나는 곳에 좋음