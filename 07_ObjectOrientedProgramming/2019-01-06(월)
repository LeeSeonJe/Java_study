2019.01.06 월요일 수업
 
 - 객체지향언어
 	현실 세계는 사물이나 개념처럼 독립되고 구분되는 각각의 객체로 이루어져 있으며,
 	발생하는 모든 사건들은 객체간의 "상호작용"으로 이 개념을 컴퓨터로 옮겨 놓아 만들어낸 것
 	
 - 객체 == 인스턴스(Instance) 
 	클래스에 정의된 내용대로 new 연산자를 통해 메모리 영역에 생성 ==> 메모리영역 Heap
 	 -  객체의 할당
 		new 연산자와 생성자를 사용하여 객체 생성 시 heap 메모리 공간에
		서로 다른 자료형의 데이터가 연속으로 나열/할당된 객체 공간
		
 - 클래스
 	여러개의 자료형, 여러개의 데이터, 연산 처리하는 기능을 포함
 	객체를 만들기 위한 설계도
 	
 	구조체는 데이터에 접근이 가능하여 보안상 문제가 있어
 	문제를 해결하기 위해 데이터 접근 제한을 걸음 ==> 캡슐화
 	
 	캡슐화로 인해 클래스 내부의 데이터에 접근이 불가하여 연산처리 기능까지 포함시킨 것이 클래스.
 	
 	
 	추상화를 통해 사물에 대한 공통적인 것만 포함
 	 - 추상화
 	 	유연성을 확보하기 위해 구체적인 것을 제거한다는 의미 	 	
	객체 지향 3대 특징
		- 캡슐화 (Encapsulation)
		- 상속 (Inheritance)
		- 다형성 (Polymorphism)
		- [추상화]
		
 - 캡슐화
 	클래스의 "멤버 변수"에 대한 접근 권한은 private(-)을 "원칙"
 	클래스의 맴버 변수에 대한 연산처리를 목적으로 하는 함수(기능)들을 클래스 내부에 작성
 
 - 필드
 	 - 접근제한자
 	 				해당 클래스 내부	같은 패키지 내	후손 클래스 내	전체
 	 	+ public		o			o			o		 o 
 		# protected		o			o			o
 		~ (default)		o			o
 		- private		o
 		
 		public == 해당 클래스 내부이며 같은 패키지이고 외부 패키지도 접근되며 전체적으로 접근가능
 		protected == 해당 클래스, 같은 패키지 내에 있으면서 외부 접근시 상속을 받은 후손클래스만 접근가능
 		default == 같은패키지 내에 해당 클래스 내부(나 자신)에서 접근가능
 		private == 해당 클래스 내부(나 자신)에서 접근가능 (캡슐화)
 	 
 	 - 예약어 
 	 	static(정적메모리 영역) == 같은 타입의 여러 객체가 "공유할 목적"의 필드에 사용하며,
 	 			     		    프로그램 시작시에 정적 메모리 영역에 자동 할당되는 멤버에 적용
 	 			    
 	 	
 	 	final(상수) == 변하지 않는 값
 	 	
 	 	static final, final static == 함께 사용할 수 있다. 공유하면서도 변하지 않는 값